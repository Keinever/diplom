import React, { useState, useEffect } from 'react';
import './ModuleCreation.css';

const ModuleCreation = ({ addModule, initialModule, isEditing = false }) => {
  const [module, setModule] = useState(initialModule || { 
    title: '', 
    description: '', 
    steps: [], 
    startDate: '' 
  });
  const [showForm, setShowForm] = useState(isEditing || false);
  const [showStepForm, setShowStepForm] = useState(false);
  const [stepType, setStepType] = useState('–ª–µ–∫—Ü–∏—è');
  const [stepContent, setStepContent] = useState({ 
    title: '', 
    description: '', 
    file: null,
    assignmentTitle: ''
  });
  const [editingStepIndex, setEditingStepIndex] = useState(null);

  const assignmentOptions = ['–ó–∞–¥–∞–Ω–∏–µ 1', '–ó–∞–¥–∞–Ω–∏–µ 2', '–ó–∞–¥–∞–Ω–∏–µ 3'];
  const stepTypes = ['–ª–µ–∫—Ü–∏—è', '–æ–±—É—á–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏–µ', '–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'];

  useEffect(() => {
    if (initialModule) {
      setModule(initialModule);
      setShowForm(true);
    }
  }, [initialModule]);

  const handleModuleChange = (e) => {
    const { name, value } = e.target;
    setModule(prev => ({ ...prev, [name]: value }));
  };

  const handleStepChange = (e) => {
    const { name, value } = e.target;
    setStepContent(prev => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    setStepContent(prev => ({ ...prev, file: e.target.files[0] }));
  };

  const addStep = () => {
    if (!stepContent.title) return;

    const newStep = {
      title: stepContent.title,
      description: stepContent.description,
      type: stepType,
      file: stepContent.file,
      assignmentTitle: stepType.includes('–∑–∞–¥–∞–Ω–∏–µ') ? stepContent.assignmentTitle : null
    };

    if (editingStepIndex !== null) {
      setModule(prev => ({
        ...prev,
        steps: prev.steps.map((step, index) => 
          index === editingStepIndex ? newStep : step
        )
      }));
    } else {
      setModule(prev => ({
        ...prev,
        steps: [...prev.steps, newStep]
      }));
    }

    setStepContent({ 
      title: '', 
      description: '', 
      file: null,
      assignmentTitle: ''
    });
    setShowStepForm(false);
    setEditingStepIndex(null);
  };

  const editStep = (index) => {
    const step = module.steps[index];
    setStepContent({
      title: step.title,
      description: step.description,
      file: step.file,
      assignmentTitle: step.assignmentTitle || ''
    });
    setStepType(step.type);
    setEditingStepIndex(index);
    setShowStepForm(true);
  };

  const deleteStep = (index) => {
    setModule(prev => ({
      ...prev,
      steps: prev.steps.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!module.title || !module.startDate) return;
    addModule(module);
    
    if (!isEditing) {
      setModule({ 
        title: '', 
        description: '', 
        steps: [], 
        startDate: '' 
      });
      setShowForm(false);
    }
  };

  return (
    <div className="module-creation">
      {!isEditing && (
        <button 
          className={`toggle-form-btn ${showForm ? 'cancel' : 'add'}`}
          onClick={() => setShowForm(!showForm)}
        >
          {showForm ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '+ –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'}
        </button>
      )}

      {showForm && (
        <form className="module-form" onSubmit={handleSubmit}>
          <h3>{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è' : '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è'}</h3>
          
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è*</label>
            <input
              type="text"
              name="title"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"
              value={module.title}
              onChange={handleModuleChange}
              required
            />
          </div>

          <div className="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è</label>
            <textarea
              name="description"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è"
              value={module.description}
              onChange={handleModuleChange}
              rows="3"
            />
          </div>

          <div className="form-group">
            <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞*</label>
            <input
              type="date"
              name="startDate"
              value={module.startDate}
              onChange={handleModuleChange}
              required
            />
          </div>

          <div className="steps-section">
            <div className="section-header">
              <h4>–®–∞–≥–∏ –º–æ–¥—É–ª—è</h4>
              <button 
                type="button"
                className="add-step-btn"
                onClick={() => {
                  setEditingStepIndex(null);
                  setShowStepForm(true);
                }}
              >
                + –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥
              </button>
            </div>

            {module.steps.length > 0 ? (
              <div className="steps-list">
                {module.steps.map((step, index) => (
                  <div key={index} className="step-item">
                    <div className="step-info">
                      <span className={`step-type ${step.type.replace(/\s+/g, '-')}`}>
                        {step.type}
                      </span>
                      <h5>{step.title}</h5>
                      {step.file && (
                        <p className="step-file">
                          <span className="file-icon">üìé</span>
                          {step.file.name}
                        </p>
                      )}
                    </div>
                    <div className="step-actions">
                      <button
                        type="button"
                        className="edit-step-btn"
                        onClick={() => editStep(index)}
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      <button
                        type="button"
                        className="delete-step-btn"
                        onClick={() => deleteStep(index)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="no-steps">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤</p>
            )}
          </div>

          {showStepForm && (
            <div className="step-form-modal">
              <div className="step-form-content">
                <div className="form-header">
                  <h4>{editingStepIndex !== null ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞'}</h4>
                  <button
                    type="button"
                    className="close-btn"
                    onClick={() => {
                      setShowStepForm(false);
                      setEditingStepIndex(null);
                    }}
                  >
                    &times;
                  </button>
                </div>

                <div className="form-group">
                  <label>–¢–∏–ø —à–∞–≥–∞*</label>
                  <select
                    value={stepType}
                    onChange={(e) => setStepType(e.target.value)}
                  >
                    {stepTypes.map(type => (
                      <option key={type} value={type}>
                        {type.charAt(0).toUpperCase() + type.slice(1)}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞*</label>
                  <input
                    type="text"
                    name="title"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞"
                    value={stepContent.title}
                    onChange={handleStepChange}
                    required
                  />
                </div>

                <div className="form-group">
                  <label>–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞*</label>
                  <input
                    type="text"
                    name="description"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞"
                    value={stepContent.description}
                    onChange={handleStepChange}
                    required
                  />
                </div>

                {stepType === '–ª–µ–∫—Ü–∏—è' && (
                  <div className="form-group">
                    <label>
                      {editingStepIndex !== null ? '–ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª' : '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª'}
                    </label>
                    <div className="file-upload">
                      <label className="upload-btn">
                        –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
                        <input
                          type="file"
                          onChange={handleFileChange}
                          accept=".MOV,.avi,.mp4,.webm,.mkv,.pdf"
                          hidden
                        />
                      </label>
                      {stepContent.file && (
                        <span className="file-name">
                          {stepContent.file.name}
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {(stepType === '–æ–±—É—á–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏–µ' || stepType === '–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ') && (
                  <div className="form-group">
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ</label>
                    <select
                      name="assignmentTitle"
                      value={stepContent.assignmentTitle}
                      onChange={handleStepChange}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ</option>
                      {assignmentOptions.map((option, index) => (
                        <option key={index} value={option}>
                          {option}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                <div className="form-actions">
                  <button
                    type="button"
                    className="cancel-btn"
                    onClick={() => {
                      setShowStepForm(false);
                      setEditingStepIndex(null);
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    type="button"
                    className="submit-btn"
                    onClick={addStep}
                    disabled={!stepContent.title}
                  >
                    {editingStepIndex !== null ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å —à–∞–≥'}
                  </button>
                </div>
              </div>
            </div>
          )}

          <div className="form-actions">
            {!isEditing && (
              <button
                type="button"
                className="cancel-btn"
                onClick={() => setShowForm(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            )}
            <button
              type="submit"
              className="submit-btn"
              disabled={!module.title || !module.startDate}
            >
              {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥—É–ª—å'}
            </button>
          </div>
        </form>
      )}
    </div>
  );
};

export default ModuleCreation;