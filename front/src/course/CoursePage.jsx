import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import './CoursePage.css';
import api, { get_csrf } from '../api'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è api

const CoursePage = () => {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const [courseInfo, setCourseInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCourseData = async () => {
      try {
        setIsLoading(true);
        const csrfToken = get_csrf();
        
        const response = await api.get(`/api/courses/${courseId}/`, {
          headers: {
            'X-CSRFToken': csrfToken,
            'Content-Type': 'application/json'
          }
        });

        const serverData = response.data;
        setCourseInfo({
          id: serverData.course_id,
          title: serverData.title,
          teacher: serverData.teacher?.name || "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω",
          studentsCount: serverData.students.length,
          description: serverData.description,
          startDate: new Date(serverData.modules[0]?.due_date).toLocaleDateString() || "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
          endDate: new Date([...serverData.modules].pop()?.due_date).toLocaleDateString() || "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        });

      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ');
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourseData();
  }, [courseId]);

  const handleViewResults = () => {
    navigate(`/courses/${courseId}/students/results`);
  };

  const handleAddStudents = () => {
    navigate(`/courses/${courseId}/students/add`);
  };

  const handleRemoveStudents = () => {
    navigate(`/courses/${courseId}/students/remove`);
  };

  const handleAddAttempts = () => {
    navigate(`/courses/${courseId}/students/attempts`);
  };

  const handleEditCourse = () => {
    navigate(`/courses/${courseId}/edit`);
  };

  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-container">
        <h2>–û—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    );
  }

  if (!courseInfo) {
    return <div className="error-container">–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return (
    <div className="course-page">
      <div className="course-header">
        <h1>{courseInfo.title}</h1>
        <div className="teacher-info">
          <button className="edit-course-btn" onClick={handleEditCourse}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å
          </button>
        </div>
      </div>

      <div className="course-meta-info">
        <div className="meta-item">
          <span className="meta-label">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</span>
          <span className="meta-value">{courseInfo.teacher}</span>
        </div>
        <div className="meta-item">
          <span className="meta-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</span>
          <span className="meta-value">{courseInfo.studentsCount}</span>
        </div>
        <div className="meta-item">
          <span className="meta-label">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</span>
          <span className="meta-value">{courseInfo.startDate}</span>
        </div>
        <div className="meta-item">
          <span className="meta-label">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
          <span className="meta-value">{courseInfo.endDate}</span>
        </div>
      </div>

      <div className="course-description">
        <h2>–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞</h2>
        <p>{courseInfo.description}</p>
      </div>

      <div className="course-management">
        <h2 className='h22'>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º</h2>
        <div className="management-buttons">
          <button className="action-btn view-results" onClick={handleViewResults}>
            <span className="icon">üìä</span>
            <span className="text">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏</span>
            <span className="description">–ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</span>
          </button>
          
          <button className="action-btn add-students" onClick={handleAddStudents}>
            <span className="icon">üë•</span>
            <span className="text">–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤</span>
            <span className="description">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫—É—Ä—Å</span>
          </button>
          
          <button className="action-btn remove-students" onClick={handleRemoveStudents}>
            <span className="icon">‚ùå</span>
            <span className="text">–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤</span>
            <span className="description">–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –∫—É—Ä—Å–∞</span>
          </button>
          
          <button className="action-btn add-attempts" onClick={handleAddAttempts}>
            <span className="icon">‚ûï</span>
            <span className="text">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏</span>
            <span className="description">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default CoursePage;